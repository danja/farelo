================================================================
REPOPACK OUTPUT FILE
================================================================

This file was generated by Repopack on: 2024-09-25T11:31:33.034Z

Purpose:
--------
This file contains a packed representation of the entire repository's contents.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.

File Format:
------------
The content is organized as follows:
1. This header section
2. Multiple file entries, each consisting of:
   a. A separator line (================)
   b. The file path (File: path/to/file)
   c. Another separator line
   d. The full contents of the file
   e. A blank line

Usage Guidelines:
-----------------
1. This file should be treated as read-only. Any changes should be made to the
   original repository files, not this packed version.
2. When processing this file, use the separators and "File:" markers to
   distinguish between different files in the repository.
3. Be aware that this file may contain sensitive information. Handle it with
   the same level of security as you would the original repository.

Notes:
------
- Some files may have been excluded based on .gitignore rules and Repopack's
  configuration.
- Binary files are not included in this packed representation.
- Code comments have been removed.


For more information about Repopack, visit: https://github.com/yamadashy/repopack

Additional User-Provided Header:
--------------------------------
form-a-matic repo

================================================================
Repository Files
================================================================

================
File: index.js
================

import fs from 'fs/promises'
import TurtleToJSON from './turtletojson.js'
import JsonToHtmlForm from './jsontohtml.js'
async function main() {
    const file = 'src/test-data/foaf-template.ttl'
    const turtleString = await fs.readFile(file, 'utf-8');
    const tj = new TurtleToJSON();
    const result = await tj.turtle2json(turtleString);
    console.log(JSON.stringify(result, null, 2));
    const converter = new JsonToHtmlForm()
    converter.jsonFileToHtmlForm('src/test-data/foaf-template.json')
        .then(htmlString => console.log(htmlString))
        .catch(error => console.error('Error:', error))
}
main().catch(console.error);

================
File: jsontohtml.js
================
import { JSDOM } from 'jsdom';
import fs from 'fs/promises';
class JsonToHtmlForm {
    constructor() {
        this.dom = new JSDOM('<!DOCTYPE html><html><body></body></html>');
        this.document = this.dom.window.document;
    }
    createFormElement(property) {
        const label = this.document.createElement('label');
        label.textContent = property.term;
        let input;
        if (property.type === 'LITERAL' && property.subtype === 'BOOLEAN') {
            input = this.document.createElement('input');
            input.type = 'checkbox';
        } else if (property.type === 'LITERAL' && property.subtype === 'INTEGER') {
            input = this.document.createElement('input');
            input.type = 'number';
        } else if (property.type === 'LITERAL' || property.type === 'URI') {
            input = this.document.createElement('textarea');
        } else {
            input = this.document.createElement('input');
            input.type = 'text';
        }
        Object.entries(property).forEach(([key, value]) => {
            input.dataset[key] = typeof value === 'object' ? JSON.stringify(value) : value;
        });
        return { label, input };
    }
    createFormElements(properties) {
        const fragment = this.document.createDocumentFragment();
        properties.forEach(property => {
            const { label, input } = this.createFormElement(property);
            fragment.appendChild(label);
            fragment.appendChild(input);
            fragment.appendChild(this.document.createElement('br'));
            if (property.children && property.children.properties) {
                const fieldset = this.document.createElement('fieldset');
                const legend = this.document.createElement('legend');
                legend.textContent = property.term;
                fieldset.appendChild(legend);
                fieldset.appendChild(this.createFormElements(property.children.properties));
                fragment.appendChild(fieldset);
            }
        });
        return fragment;
    }
    jsonToHtmlForm(jsonData) {
        const form = this.document.createElement('form');
        form.appendChild(this.createFormElements(jsonData.ROOT.properties));
        return form;
    }
    async jsonFileToHtmlForm(filePath) {
        try {
            const jsonString = await fs.readFile(filePath, 'utf-8');
            const jsonData = JSON.parse(jsonString);
            const formElement = this.jsonToHtmlForm(jsonData);
            this.document.body.appendChild(formElement);
            return this.dom.serialize();
        } catch (error) {
            console.error('Error reading or parsing JSON file:', error);
            throw error;
        }
    }
}
export default JsonToHtmlForm;

================
File: test-data/foaf-form.html
================
<!DOCTYPE html>
<html>
<head></head>
<body>
    <form><label>name</label><textarea data-term="name" data-type="LITERAL"
            data-namespace="http://xmlns.com/foaf/0.1/"></textarea><br><label>mbox</label><textarea data-term="mbox"
            data-type="URI" data-namespace="http://xmlns.com/foaf/0.1/"></textarea><br><label>homepage</label><textarea
            data-term="homepage" data-type="URI"
            data-namespace="http://xmlns.com/foaf/0.1/"></textarea><br><label>nick</label><textarea data-term="nick"
            data-type="LITERAL"
            data-namespace="http://xmlns.com/foaf/0.1/"></textarea><br><label>depiction</label><textarea
            data-term="depiction" data-type="URI"
            data-namespace="http://xmlns.com/foaf/0.1/"></textarea><br><label>interest</label><textarea
            data-term="interest" data-type="URI"
            data-namespace="http://xmlns.com/foaf/0.1/"></textarea><br><label>knows</label><input type="text"
            data-term="knows" data-type="BNODE" data-namespace="http://xmlns.com/foaf/0.1/"
            data-children="{&quot;properties&quot;:[{&quot;term&quot;:&quot;name&quot;,&quot;type&quot;:&quot;LITERAL&quot;,&quot;namespace&quot;:&quot;http://xmlns.com/foaf/0.1/&quot;}],&quot;namespace&quot;:&quot;http://xmlns.com/foaf/0.1/&quot;,&quot;type&quot;:&quot;Person&quot;}"><br>
        <fieldset>
            <legend>knows</legend><label>name</label><textarea data-term="name" data-type="LITERAL"
                data-namespace="http://xmlns.com/foaf/0.1/"></textarea><br>
        </fieldset><label>maintainer-of</label><input type="text" data-term="maintainer-of" data-type="BNODE"
            data-namespace="http://usefulinc.com/ns/doap#"
            data-children="{&quot;properties&quot;:[{&quot;term&quot;:&quot;homepage&quot;,&quot;type&quot;:&quot;URI&quot;,&quot;namespace&quot;:&quot;http://usefulinc.com/ns/doap#&quot;},{&quot;term&quot;:&quot;description&quot;,&quot;type&quot;:&quot;LITERAL&quot;,&quot;namespace&quot;:&quot;http://usefulinc.com/ns/doap#&quot;,&quot;subtype&quot;:&quot;LANG&quot;}],&quot;namespace&quot;:&quot;http://usefulinc.com/ns/doap#&quot;,&quot;type&quot;:&quot;Project&quot;}"><br>
        <fieldset>
            <legend>maintainer-of</legend><label>homepage</label><textarea data-term="homepage" data-type="URI"
                data-namespace="http://usefulinc.com/ns/doap#"></textarea><br><label>description</label><textarea
                data-term="description" data-type="LITERAL" data-namespace="http://usefulinc.com/ns/doap#"
                data-subtype="LANG"></textarea><br>
        </fieldset><label>taskStatus</label><input type="checkbox" data-term="taskStatus" data-type="LITERAL"
            data-namespace="http://purl.org/stuff/prj/" data-subtype="BOOLEAN"><br><label>priority</label><input
            type="number" data-term="priority" data-type="LITERAL" data-namespace="http://purl.org/stuff/prj/"
            data-subtype="INTEGER"><br>
    </form>
</body>
</html>

================
File: test-data/foaf-template.json
================
{
  "ROOT": {
    "properties": [
      {
        "term": "name",
        "type": "LITERAL",
        "namespace": "http://xmlns.com/foaf/0.1/"
      },
      {
        "term": "mbox",
        "type": "URI",
        "namespace": "http://xmlns.com/foaf/0.1/"
      },
      {
        "term": "homepage",
        "type": "URI",
        "namespace": "http://xmlns.com/foaf/0.1/"
      },
      {
        "term": "nick",
        "type": "LITERAL",
        "namespace": "http://xmlns.com/foaf/0.1/"
      },
      {
        "term": "depiction",
        "type": "URI",
        "namespace": "http://xmlns.com/foaf/0.1/"
      },
      {
        "term": "interest",
        "type": "URI",
        "namespace": "http://xmlns.com/foaf/0.1/"
      },
      {
        "term": "knows",
        "type": "BNODE",
        "namespace": "http://xmlns.com/foaf/0.1/",
        "children": {
          "properties": [
            {
              "term": "name",
              "type": "LITERAL",
              "namespace": "http://xmlns.com/foaf/0.1/"
            }
          ],
          "namespace": "http://xmlns.com/foaf/0.1/",
          "type": "Person"
        }
      },
      {
        "term": "maintainer-of",
        "type": "BNODE",
        "namespace": "http://usefulinc.com/ns/doap#",
        "children": {
          "properties": [
            {
              "term": "homepage",
              "type": "URI",
              "namespace": "http://usefulinc.com/ns/doap#"
            },
            {
              "term": "description",
              "type": "LITERAL",
              "namespace": "http://usefulinc.com/ns/doap#",
              "subtype": "LANG"
            }
          ],
          "namespace": "http://usefulinc.com/ns/doap#",
          "type": "Project"
        }
      },
      {
        "term": "taskStatus",
        "type": "LITERAL",
        "namespace": "http://purl.org/stuff/prj/",
        "subtype": "BOOLEAN"
      },
      {
        "term": "priority",
        "type": "LITERAL",
        "namespace": "http://purl.org/stuff/prj/",
        "subtype": "INTEGER"
      }
    ],
    "namespace": "http://xmlns.com/foaf/0.1/",
    "type": "Person"
  },
  "dataview": "http://purl.org/stuff/json-ldx",
  "transformation": "https://hyperdata.it/2004/json-ldx.js"
}
<!DOCTYPE html><html><head></head><body><form><label>name</label><textarea data-term="name" data-type="LITERAL" data-namespace="http://xmlns.com/foaf/0.1/"></textarea><br><label>mbox</label><textarea data-term="mbox" data-type="URI" data-namespace="http://xmlns.com/foaf/0.1/"></textarea><br><label>homepage</label><textarea data-term="homepage" data-type="URI" data-namespace="http://xmlns.com/foaf/0.1/"></textarea><br><label>nick</label><textarea data-term="nick" data-type="LITERAL" data-namespace="http://xmlns.com/foaf/0.1/"></textarea><br><label>depiction</label><textarea data-term="depiction" data-type="URI" data-namespace="http://xmlns.com/foaf/0.1/"></textarea><br><label>interest</label><textarea data-term="interest" data-type="URI" data-namespace="http://xmlns.com/foaf/0.1/"></textarea><br><label>knows</label><input type="text" data-term="knows" data-type="BNODE" data-namespace="http://xmlns.com/foaf/0.1/" data-children="{&quot;properties&quot;:[{&quot;term&quot;:&quot;name&quot;,&quot;type&quot;:&quot;LITERAL&quot;,&quot;namespace&quot;:&quot;http://xmlns.com/foaf/0.1/&quot;}],&quot;namespace&quot;:&quot;http://xmlns.com/foaf/0.1/&quot;,&quot;type&quot;:&quot;Person&quot;}"><br><fieldset><legend>knows</legend><label>name</label><textarea data-term="name" data-type="LITERAL" data-namespace="http://xmlns.com/foaf/0.1/"></textarea><br></fieldset><label>maintainer-of</label><input type="text" data-term="maintainer-of" data-type="BNODE" data-namespace="http://usefulinc.com/ns/doap#" data-children="{&quot;properties&quot;:[{&quot;term&quot;:&quot;homepage&quot;,&quot;type&quot;:&quot;URI&quot;,&quot;namespace&quot;:&quot;http://usefulinc.com/ns/doap#&quot;},{&quot;term&quot;:&quot;description&quot;,&quot;type&quot;:&quot;LITERAL&quot;,&quot;namespace&quot;:&quot;http://usefulinc.com/ns/doap#&quot;,&quot;subtype&quot;:&quot;LANG&quot;}],&quot;namespace&quot;:&quot;http://usefulinc.com/ns/doap#&quot;,&quot;type&quot;:&quot;Project&quot;}"><br><fieldset><legend>maintainer-of</legend><label>homepage</label><textarea data-term="homepage" data-type="URI" data-namespace="http://usefulinc.com/ns/doap#"></textarea><br><label>description</label><textarea data-term="description" data-type="LITERAL" data-namespace="http://usefulinc.com/ns/doap#" data-subtype="LANG"></textarea><br></fieldset><label>taskStatus</label><input type="checkbox" data-term="taskStatus" data-type="LITERAL" data-namespace="http://purl.org/stuff/prj/" data-subtype="BOOLEAN"><br><label>priority</label><input type="number" data-term="priority" data-type="LITERAL" data-namespace="http://purl.org/stuff/prj/" data-subtype="INTEGER"><br></form></body></html>

================
File: test-data/foaf-template.ttl
================
# foaf-template.ttl sample for form-a-matic

@prefix rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> .
@prefix rdfs: <http://www.w3.org/2000/01/rdf-schema#> .
@prefix foaf: <http://xmlns.com/foaf/0.1/> .
@prefix doap: <http://usefulinc.com/ns/doap#> .
@prefix prj: <http://purl.org/stuff/prj/> .
<#ROOT>
    a foaf:Person ;
    foaf:name "LITERAL" ;
    foaf:mbox <#URI> ;
    foaf:homepage <#URI> ;
    foaf:nick "LITERAL" ;
    foaf:depiction <#URI> ;
    foaf:interest <#URI> ;
    foaf:knows [
        a foaf:Person ;
        foaf:name "LITERAL"
    ] ;
    doap:maintainer-of
		[ a doap:Project ;
		    doap:homepage <#URI> ;
            doap:description "LITERAL:LANG"
        ];
    prj:taskStatus "LITERAL:BOOLEAN";
    prj:priority "LITERAL:INTEGER" .

================
File: turtletojson.js
================

import { Readable } from 'stream';
import N3Parser from '@rdfjs/parser-n3';
class TurtleToJSON {
    constructor() {
        this.parser = new N3Parser();
        this.prefixes = {};
        this.result = {};
    }
    async parse(turtleString) {
        const input = Readable.from([turtleString]);
        const quads = [];
        for await (const quad of this.parser.import(input)) {
            quads.push(quad);
            if (quad.predicate.value === 'http://www.w3.org/1999/02/22-rdf-syntax-ns#type') {
                this.prefixes[quad.object.value.split(':')[0]] = quad.object.value.split(':')[1];
            }
        }
        return quads;
    }
    processQuads(quads) {
        const rootQuad = quads.find(q => q.subject.value === '#ROOT');
        if (!rootQuad) throw new Error('No #ROOT subject found');
        this.result.ROOT = this.processNode(rootQuad.subject, quads)
        this.result.dataview = 'http://purl.org/stuff/json-ldx'
        this.result.transformation = 'https://hyperdata.it/2004/json-ldx.js'
        return this.result;
    }
    processNode(subject, quads) {
        const node = { properties: [] };
        const relevantQuads = quads.filter(q => q.subject.equals(subject));
        for (const quad of relevantQuads) {
            if (quad.predicate.value === 'http://www.w3.org/1999/02/22-rdf-syntax-ns#type') {
                const { namespace, term } = this.splitURI(quad.object.value);
                node.namespace = namespace;
                node.type = term;
            } else {
                const property = this.processProperty(quad, quads);
                node.properties.push(property);
            }
        }
        return node;
    }
    processProperty(quad, quads) {
        const { namespace, term } = this.splitURI(quad.predicate.value);
        const markerValues = this.getMarkerType(quad.object)
        const property = {
            term: term,
            type: markerValues.type,
            namespace: namespace
        }
        if (markerValues.subtype) {
            property.subtype = markerValues.subtype
        }
        if (property.type === 'BNODE') {
            property.children = this.processNode(quad.object, quads);
        }
        return property;
    }
    getMarkerType(object) {
        const marker = this.splitMarker(object.value)
        if (object.termType === 'Literal') {
            return marker
        } else if (object.termType === 'NamedNode') {
            marker.type = 'URI'
        } else {
            marker.type = 'BNODE';
        }
        return marker
    }
    splitURI(uri) {
        const lastHashIndex = uri.lastIndexOf('#');
        const lastSlashIndex = uri.lastIndexOf('/');
        const splitIndex = Math.max(lastHashIndex, lastSlashIndex);
        if (splitIndex === -1) {
            return { namespace: '', term: uri };
        }
        // Split the URI
        const namespace = uri.substring(0, splitIndex + 1);
        const term = uri.substring(splitIndex + 1);
        return { namespace, term };
    }
    splitMarker(marker) {
        const [type, subtype] = marker.split(':');
        return {
            type,
            subtype: subtype || undefined
        };
    }
    async turtle2json(turtleString) {
        const quads = await this.parse(turtleString);
        return this.processQuads(quads);
    }
}
export default TurtleToJSON
